
enum RankingOrderCalc {
	STANDARD = 0,
	ORDINAL = 1
}

enum RankingMode {
	GLOBAL = 0,
	GLOBAL_AROUND_SELF = 1,
	SELF = 4
}

enum RankingStatFlags {
	RANKING_COUNT = 1,
	TOTAL_SCORE = 2,
	LOWEST_SCORE = 4,
	HIGHEST_SCORE = 8,
	AVERAGE_SCORE = 16,
	ALL = 31
}

struct RankingOrderParam {
	uint8 order_calc = 0;
	uint8 group_index = 255;
	uint8 group_num = 0;
	uint8 time_scope = 2;
	uint32 offset = 0;
	uint8 count = 10;
}

struct RankingRankData {
	pid pid;
	uint64 unique_id;
	uint32 rank;
	uint32 category;
	uint32 score;
	list<uint8> groups;
	uint64 param;
	buffer common_data;
	
	nex 40000 {
		datetime update_time;
	}
}

struct RankingResult {
	list<RankingRankData> data;
	uint32 total;
	datetime since_time;
}

struct RankingCachedResult : RankingResult {
	datetime created_time;
	datetime expired_time;
	uint8 max_length;
}

struct RankingStats {
	list<double> stats;
}

struct RankingScoreData {
	uint32 category;
	uint32 score;
	uint8 order;
	uint8 update_mode;
	list<uint8> groups;
	uint64 param;
}

struct RankingChangeAttributesParam {
	uint8 flags;
	list<uint8> groups;
	uint64 param;
}

protocol Ranking : 112 {
	method upload_score(RankingScoreData score_data, uint64 unique_id) {}
	
	method delete_score(uint32 category, uint64 unique_id) {}
	method delete_all_scores(uint64 unique_id) {}
	
	method upload_common_data(buffer common_data, uint64 unique_id) {}
	method delete_common_data(uint64 unique_id) {}
	
	method get_common_data(uint64 unique_id) {
		buffer data;
	}
	
	method change_attributes(uint32 category, RankingChangeAttributesParam param, uint64 unique_id) {}
	method change_all_attributes(RankingChangeAttributesParam param, uint64 unique_id) {}
	
	method get_ranking(uint8 mode, uint32 category, RankingOrderParam order, uint64 unique_id, pid pid) {
		RankingResult result;
	}
	
	method get_approx_order(uint32 category, RankingOrderParam order, uint32 score, uint64 unique_id, pid pid) {
		uint32 order;
	}
	
	method get_stats(uint32 category, RankingOrderParam order, uint32 flags) {
		RankingStats stats;
	}
	
	method get_ranking_by_pid_list(list<pid> pids, uint8 mode, uint32 category, RankingOrderParam order, uint64 unique_id) {
		RankingResult result;
	}
	
	method get_ranking_by_unique_id_list(list<uint64> ids, uint8 mode, uint32 category, RankingOrderParam order, uint64 unique_id) {
		RankingResult result;
	}
	
	method get_cached_topx_ranking(uint32 category, RankingOrderParam order) {
		RankingCachedResult result;
	}
	
	method get_cached_topx_rankings(list<uint32> categories, list<RankingOrderParam> order) {
		list<RankingCachedResult> results;
	}
}
